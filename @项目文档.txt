# 项目文档

## 2025-07-15

- **任务**: 修复 Netlify 部署失败问题。
- **问题分析**: 构建日志显示在安装 `pydantic-core` 时出错，原因是缺少 Rust 编译环境。这通常发生在没有为目标 Python 版本/平台提供预编译的 wheel 包时。日志中出现了 `cp313` 字样，暗示可能使用了 Python 3.13，而 `pydantic-core` 可能没有为此版本提供预编译包。
- **初步计划**:
    1. 检查项目指定的 Python 版本。
    2. 如果 Python 版本过新，则降级到稳定的 LTS 版本（如 3.11）。
    3. 如果问题依然存在，尝试调整 `requirements.txt` 中的 `pydantic` 版本。

- **执行步骤**:
    - 读取 `.python-version` 文件，发现版本为 `3.12`。
    - 将 `.python-version` 文件中的版本修改为 `3.11`，以提高在 Netlify 等平台上的兼容性。
    - 第二次部署仍然失败，日志显示 Netlify 依然在使用 Python 3.13 (`cp313`)，并且因为缺少 Rust 环境而无法编译 `pydantic-core`。
    - 为了避免编译，将 `requirements.txt` 中的 `pydantic==2.6.1` 修改为 `pydantic<2`，以强制使用不需要 Rust 编译的 V1 版本。
    - 第三次部署失败，原因是依赖冲突：`google-genai==1.11.0` 要求 `pydantic>=2`。
    - 为了解决冲突，将 `google-genai` 的版本降级到 `0.3.2`，这是一个不强制要求 Pydantic V2 的版本。
    - 检查 `app/services/gemini.py`，发现代码中使用了 Pydantic V2 的 `.model_dump()` 方法。将其修改为 V1 兼容的 `.dict()` 方法。
    - 第四次部署失败，原因是 `pip` 找不到 `google-genai==0.3.2` 版本。
    - 根据 `pip` 的可用版本列表，将 `google-genai` 的版本修正为 `0.3.0`。
    - 第五次部署失败，发现 `google-genai==0.3.0` 仍然依赖 Pydantic V2。
    - 经过对 `app/services/gemini.py` 的分析，确认项目通过 `httpx` 直接调用 Google API，并未实际使用 `google-genai` SDK。
    - **最终解决方案**: 从 `requirements.txt` 中彻底移除 `google-genai` 依赖，因为它是不必要的，并且是所有依赖冲突的根源。
    - 第六次部署失败，错误信息为 `Deploy directory 'src' does not exist`。这是 Netlify 的部署配置问题。
    - **最终修复**:
        1. 创建 `netlify.toml` 文件，为 FastAPI 应用配置正确的构建和重定向规则。
        2. 创建 `netlify/functions/server.py` 文件，作为 Netlify Functions 的入口点来启动 FastAPI 应用。
    - 第七次部署失败，错误信息为 `Deploy directory 'static' does not exist`。
    - **最终修复**: 修改 `netlify.toml` 中的构建命令为 `mkdir -p static`，以确保在部署阶段发布目录存在。
    - 部署成功后访问 URL 出现 404 错误。
    - **最终修复**: 再次修改 `netlify.toml`，明确指定 `[functions]` 的 `directory`，以确保 Netlify 能正确找到并部署 serverless function。
    - 部署后仍然 404，怀疑是 serverless function 内部的路径问题。
    - **最终修复**: 修改 `app/main.py` 中 `Jinja2Templates` 的目录路径，使其不依赖 `__file__`，从而在 Netlify 环境中更健壮。
    - 部署后仍然 404，问题非常顽固。
    - **调试步骤**:
        1. 创建一个极简的 FastAPI 应用 `app/debug_main.py`。
        2. 修改 `netlify/functions/server.py`，使其指向这个调试应用。
        3. 目的是测试部署配置是否正确。如果这个调试应用能成功运行，说明问题出在原应用的代码中；如果仍然失败，说明问题在配置层面。
    - 调试应用部署后仍然 404，日志显示 `No Functions were found`。
    - **最终调试策略**:
        1. 将函数目录从 `netlify/functions` 移动到顶级的 `functions`，以遵循 Netlify 的标准约定。
        2. 简化 `netlify.toml`，移除 `[functions]` 配置块，完全依赖 Netlify 的默认行为。
        3. 使用 `git rm -r netlify` 删除了旧的、多余的目录。
    - **最终、正确的部署策略**:
        1. 仔细阅读 `README.md` 后，发现这是一个前后端紧密耦合的项目，前端构建产物需要被后端服务。
        2. **重构部署流程**:
            a. 修改 `page/vite.config.js`，将前端构建输出到标准的 `dist` 目录。
            b. 重写 `netlify.toml`，设置正确的 `base`、`command` 和 `publish` 目录，以正确构建和部署前端。
            c. 修改 `app/main.py`，移除所有静态文件和模板相关的代码，因为这些将由 Netlify 的静态 CDN 处理。
            d. 将 `functions/server.py` 恢复为指向主应用 `app.main`。
            e. 删除了调试用的 `app/debug_main.py`。
    - 部署失败，原因是 `publish` 目录路径错误。
    - **最终修复**: 修正 `netlify.toml` 中的 `publish` 路径为 `dist`。

## 2025-07-15 (下午)

- **任务**: 配置管理员密码和 API 密钥。
- **执行步骤**:
    - 修改 `app/config/settings.py` 文件，将 `WEB_PASSWORD` 的默认值设置为 `67564534`。
    - 用户反馈使用新密码时出现 "HTTP 404" 错误。
    - **问题分析**: 404 错误表明请求的 URL 不存在，而不是密码认证失败。经过排查，发现 `netlify.toml` 文件中只配置了 `/v1/*` 的重定向规则，而前端发送的 `/api/update-config` 请求没有被正确路由到后端 serverless function。
    - **解决方案**: 在 `netlify.toml` 中添加一条新的重定向规则，将所有 `/api/*` 的请求也重定向到 `/.netlify/functions/server`。
    - 用户提供了 API 密钥，并手动填入了 `app/config/settings.py` 文件。
    - 检查了 `app/config/settings.py` 文件，确认 `GEMINI_API_KEYS` 格式正确。
